What happens when you initialize a repository? Why do you need to do it?

	It makes the the directiory a version control system, i.e ready to track change made to any file added using the git add command.
	Initializing will enable git version control system to know the project you want to keep track of, not just everything in your computer.


How is the staging area different from the working directory and the repository? What value do you think it offers?

	It contains the file which changes can be tracked unlike like working directory that contains everything about the project. It help to logically organise changes to be added to a commit before commiting, also as a reminder of changes that are yet to be commited.


How can you use the staging area to make sure you have one commit per logical change?

	After making changes to some file on the working directory, the staging area can be useful by making sure only the changes that are logically related to each other are added to it before commiting. This will make sure logically related changes are committed at a time.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	- When working on a feature yet to be perfected before making it part of the main project.
	- When fixing a bit complex bug that might take some time before re-intgreting back to the main code.
	- When preparing documentation as you build a project.


How do the diagrams help you visualize the branch structure?

	it makes it easier to know exactly the where other branches commit brached out from the master commit and also to keep track of all the commits and how they relate.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	When two branches are merged together, one of the branch is incorparated into the other one and their commits are sorted based on the day of the commit. To have a clear picture of how everything is arranged.